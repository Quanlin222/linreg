)
#' Fit a Ridge Regression Model
#' @param formula A formula object specifying the model to be fitted.
#' @param data A data frame containing the dataset for fitting.
#' @param lambda A numeric value specifying the ridge penalty parameter.
#' @return An instance of the `ridgereg` class containing the fitted model.
#' @seealso \code{\link[MASS]{lm.ridge}} for a comparable ridge regression implementation in the MASS package.
#' @examples
#' data(iris)
#' mod <- ridgereg_fit(Petal.Length ~ Species, data = iris, lambda = 0.1)
#' mod$print()
#' mod$predict(newdata = iris)
#' mod$coef()
#' @export
ridgereg_fit <- function(formula, data, lambda) {
data_name <- deparse(substitute(data))
ridgereg$new(formula = formula, data = data, data_name = data_name, lambda = lambda)
}
source("~/workspace/github/linreg/R/ridgereg.R")
data("iris")
my_ridgereg <- ridgereg_fit(Petal.Length ~ Species, data = iris, lambda = 0.1)
my_ridgereg$print()
#' Ridge Regression Reference Class
#'
#' This reference class implements ridge regression, allowing users to fit a ridge regression model, compute coefficients, predict values, and print model summaries.
#'
#' Ridge regression is useful in cases where multicollinearity is present among predictors or when the number of predictors (p) exceeds the number of observations (n). This class calculates the coefficients using the formula:
#' \deqn{\beta_{ridge} = (X^TX + \lambda I)^{-1}X^Ty}
#' where \eqn{\lambda} is the regularization parameter.
#'
#' @field formula A formula object specifying the regression model.
#' @field data_name A character string with the name of the data used in the model.
#' @field data A data frame containing the dataset to be used for ridge regression.
#' @field lambda A numeric value for the ridge penalty parameter, \eqn{\lambda}.
#' @field coefficients A numeric vector storing the ridge regression coefficients.
#' @field fitted_values A numeric vector of the model's fitted values.
#'
#' @return An instance of the `ridgereg` class with fields and methods for ridge regression.
#' @export
ridgereg <- setRefClass(
"ridgereg",
fields = list(
formula = "formula",
data_name = "character",
data = "data.frame",
lambda = "numeric",
coefficients = "numeric",
fitted_values = "numeric"
),
methods = list(
#' Initialize the ridge regression model
#' @param formula A formula specifying the model to be used.
#' @param data A data frame containing the data for fitting the model.
#' @param data_name A character string specifying the name of the dataset.
#' @param lambda A numeric value for the ridge penalty parameter (default is 0).
#' @export
initialize = function(formula, data, data_name, lambda = 0) {
formula <<- formula
data_name <<- data_name
data <<- data
lambda <<- lambda
# Create the model frame and design matrix
mf <- model.frame(formula, data)
X <- model.matrix(formula, mf)  # Don't exclude intercept column
y <- model.response(mf)
# Ridge coefficients calculation
lambda_I <- lambda * diag(ncol(X))
coefficients <<- as.numeric(solve(t(X) %*% X + lambda_I) %*% (t(X) %*% y))
# Compute fitted values
fitted_values <<- as.numeric(X %*% coefficients)
message("Data name stored: ", data_name)
},
#' Print the ridge regression model details
#' @export
print = function() {
cat("Call:\n")
cat(sprintf("ridgereg(formula = %s, data = %s, lambda = %.1f)\n",
deparse(formula), data_name, lambda))
cat("\nCoefficients:\n")
# Print coefficients with variable names
coef_names <- colnames(model.matrix(formula, data))  # Include intercept
coef_values <- coefficients
for (i in seq_along(coef_values)) {
cat(sprintf("%20s", coef_names[i]))
}
cat("\n")
for (j in seq_along(coef_values)) {
cat(sprintf("%20.2f", coef_values[j]))
}
cat("\n")
},
#' Predict new values based on the ridge regression model
#' @param newdata Optional data frame for predicting new values. If NULL, the method returns fitted values for the training data.
#' @return A numeric vector of predicted values.
#' @export
predict = function(newdata = NULL) {
if (is.null(newdata)) {
return(fitted_values)
} else {
# Ensure newdata contains all variables in the formula and add Intercept column
newdata <- model.frame(formula, newdata)  # Create model frame
newdata <- cbind(Intercept = 1, newdata)  # Add intercept column
X_new <- model.matrix(~ . - 1, newdata)  # Generate design matrix, exclude intercept
return(as.numeric(X_new %*% coefficients))
}
},
#' Get the ridge regression coefficients
#' @return A numeric vector of ridge regression coefficients.
#' @export
coef = function() {
return(as.numeric(coefficients))
}
)
)
#' Fit a Ridge Regression Model
#' @param formula A formula object specifying the model to be fitted.
#' @param data A data frame containing the dataset for fitting.
#' @param lambda A numeric value specifying the ridge penalty parameter.
#' @return An instance of the `ridgereg` class containing the fitted model.
#' @seealso \code{\link[MASS]{lm.ridge}} for a comparable ridge regression implementation in the MASS package.
#' @examples
#' data(iris)
#' mod <- ridgereg_fit(Petal.Length ~ Species, data = iris, lambda = 0.1)
#' mod$print()
#' mod$predict(newdata = iris)
#' mod$coef()
#' @export
ridgereg_fit <- function(formula, data, lambda) {
data_name <- deparse(substitute(data))
ridgereg$new(formula = formula, data = data, data_name = data_name, lambda = lambda)
}
source("~/workspace/github/linreg/R/ridgereg.R")
data("iris")
my_ridgereg <- ridgereg_fit(Petal.Length ~ Species, data = iris, lambda = 0.1)
my_ridgereg$print()
#' Ridge Regression Reference Class
#'
#' This reference class implements ridge regression, allowing users to fit a ridge regression model, compute coefficients, predict values, and print model summaries.
#'
#' Ridge regression is useful in cases where multicollinearity is present among predictors or when the number of predictors (p) exceeds the number of observations (n). This class calculates the coefficients using the formula:
#' \deqn{\beta_{ridge} = (X^TX + \lambda I)^{-1}X^Ty}
#' where \eqn{\lambda} is the regularization parameter.
#'
#' @field formula A formula object specifying the regression model.
#' @field data_name A character string with the name of the data used in the model.
#' @field data A data frame containing the dataset to be used for ridge regression.
#' @field lambda A numeric value for the ridge penalty parameter, \eqn{\lambda}.
#' @field coefficients A numeric vector storing the ridge regression coefficients.
#' @field fitted_values A numeric vector of the model's fitted values.
#'
#' @return An instance of the `ridgereg` class with fields and methods for ridge regression.
#' @export
ridgereg <- setRefClass(
"ridgereg",
fields = list(
formula = "formula",
data_name = "character",
data = "data.frame",
lambda = "numeric",
coefficients = "numeric",
fitted_values = "numeric"
),
methods = list(
#' Initialize the ridge regression model
#' @param formula A formula specifying the model to be used.
#' @param data A data frame containing the data for fitting the model.
#' @param data_name A character string specifying the name of the dataset.
#' @param lambda A numeric value for the ridge penalty parameter (default is 0).
#' @export
initialize = function(formula, data, data_name, lambda = 0) {
formula <<- formula
data_name <<- data_name
data <<- data
lambda <<- lambda
# Create the model frame and design matrix
mf <- model.frame(formula, data)
X <- model.matrix(formula, mf)  # This includes the intercept
y <- model.response(mf)
# Ridge coefficients calculation
lambda_I <- lambda * diag(ncol(X))
coefficients <<- as.numeric(solve(t(X) %*% X + lambda_I) %*% (t(X) %*% y))
# Compute fitted values
fitted_values <<- as.numeric(X %*% coefficients)
message("Data name stored: ", data_name)
},
#' Print the ridge regression model details
#' @export
print = function() {
cat("Call:\n")
cat(sprintf("ridgereg(formula = %s, data = %s, lambda = %.1f)\n",
deparse(formula), data_name, lambda))
cat("\nCoefficients:\n")
# Print coefficients with variable names
coef_names <- colnames(model.matrix(formula, data))  # Include intercept
coef_values <- coefficients
for (i in seq_along(coef_values)) {
cat(sprintf("%20s", coef_names[i]))
}
cat("\n")
for (j in seq_along(coef_values)) {
cat(sprintf("%20.2f", coef_values[j]))
}
cat("\n")
},
#' Predict new values based on the ridge regression model
#' @param newdata Optional data frame for predicting new values. If NULL, the method returns fitted values for the training data.
#' @return A numeric vector of predicted values.
#' @export
predict = function(newdata = NULL) {
if (is.null(newdata)) {
return(fitted_values)
} else {
# Ensure newdata contains all variables in the formula and add Intercept column
newdata <- model.frame(formula, newdata, na.action = na.omit)  # Create model frame
X_new <- model.matrix(formula, newdata)  # Generate design matrix (this includes the intercept)
return(as.numeric(X_new %*% coefficients))
}
},
#' Get the ridge regression coefficients
#' @return A numeric vector of ridge regression coefficients.
#' @export
coef = function() {
return(as.numeric(coefficients))
}
)
)
#' Fit a Ridge Regression Model
#' @param formula A formula object specifying the model to be fitted.
#' @param data A data frame containing the dataset for fitting.
#' @param lambda A numeric value specifying the ridge penalty parameter.
#' @return An instance of the `ridgereg` class containing the fitted model.
#' @seealso \code{\link[MASS]{lm.ridge}} for a comparable ridge regression implementation in the MASS package.
#' @examples
#' data(iris)
#' mod <- ridgereg_fit(Petal.Length ~ Species, data = iris, lambda = 0.1)
#' mod$print()
#' mod$predict(newdata = iris)
#' mod$coef()
#' @export
ridgereg_fit <- function(formula, data, lambda) {
data_name <- deparse(substitute(data))
ridgereg$new(formula = formula, data = data, data_name = data_name, lambda = lambda)
}
source("~/workspace/github/linreg/R/ridgereg.R")
data("iris")
my_ridgereg <- ridgereg_fit(Petal.Length ~ Species, data = iris, lambda = 0.1)
my_ridgereg$print()
devtools::load_all(".")
rm(list = c("ridgereg_fit"))
devtools::load_all(".")
devtools::document()
devtools::load_all(".")
devtools::document()
devtools::load_all(".")
devtools::document()
#' Ridge Regression Reference Class
#'
#' This reference class implements ridge regression, allowing users to fit a ridge regression model, compute coefficients, predict values, and print model summaries.
#'
#' Ridge regression is useful in cases where multicollinearity is present among predictors or when the number of predictors (p) exceeds the number of observations (n). This class calculates the coefficients using the formula:
#' \deqn{\beta_{ridge} = (X^TX + \lambda I)^{-1}X^Ty}
#' where \eqn{\lambda} is the regularization parameter.
#'
#' @field formula A formula object specifying the regression model.
#' @field data_name A character string with the name of the data used in the model.
#' @field data A data frame containing the dataset to be used for ridge regression.
#' @field lambda A numeric value for the ridge penalty parameter, \eqn{\lambda}.
#' @field coefficients A numeric vector storing the ridge regression coefficients.
#' @field fitted_values A numeric vector of the model's fitted values.
#'
#' @return An instance of the `ridgereg` class with fields and methods for ridge regression.
#' @export
ridgereg <- setRefClass(
"ridgereg",
fields = list(
formula = "formula",
data_name = "character",
data = "data.frame",
lambda = "numeric",
coefficients = "numeric",
fitted_values = "numeric"
),
methods = list(
#' Initialize the ridge regression model
#' @param formula A formula specifying the model to be used.
#' @param data A data frame containing the data for fitting the model.
#' @param data_name A character string specifying the name of the dataset.
#' @param lambda A numeric value for the ridge penalty parameter (default is 0).
#' @export
initialize = function(formula, data, data_name, lambda = 0) {
formula <<- formula
data_name <<- data_name
data <<- data
lambda <<- lambda
# Create the model frame and design matrix
mf <- model.frame(formula, data)
X <- model.matrix(formula, mf)  # This includes the intercept
y <- model.response(mf)
# Ridge coefficients calculation
lambda_I <- lambda * diag(ncol(X))
coefficients <<- as.numeric(solve(t(X) %*% X + lambda_I) %*% (t(X) %*% y))
# Compute fitted values
fitted_values <<- as.numeric(X %*% coefficients)
message("Data name stored: ", data_name)
},
#' Print the ridge regression model details
#' @export
print = function() {
cat("Call:\n")
cat(sprintf("ridgereg(formula = %s, data = %s, lambda = %.1f)\n",
deparse(formula), data_name, lambda))
cat("\nCoefficients:\n")
# Print coefficients with variable names
coef_names <- colnames(model.matrix(formula, data))  # Include intercept
coef_values <- coefficients
for (i in seq_along(coef_values)) {
cat(sprintf("%20s", coef_names[i]))
}
cat("\n")
for (j in seq_along(coef_values)) {
cat(sprintf("%20.2f", coef_values[j]))
}
cat("\n")
},
#' Predict new values based on the ridge regression model
#' @param newdata Optional data frame for predicting new values. If NULL, the method returns fitted values for the training data.
#' @return A numeric vector of predicted values.
#' @export
predict = function(newdata = NULL) {
if (is.null(newdata)) {
return(fitted_values)
} else {
# Ensure newdata contains all variables in the formula and add Intercept column
newdata <- model.frame(formula, newdata, na.action = na.omit)  # Create model frame
X_new <- model.matrix(formula, newdata)  # Generate design matrix (this includes the intercept)
return(as.numeric(X_new %*% coefficients))
}
},
#' Get the ridge regression coefficients
#' @return A numeric vector of ridge regression coefficients.
#' @export
coef = function() {
return(as.numeric(coefficients))
}
)
)
#' Fit a Ridge Regression Model
#' @param formula A formula object specifying the model to be fitted.
#' @param data A data frame containing the dataset for fitting.
#' @param lambda A numeric value specifying the ridge penalty parameter.
#' @return An instance of the `ridgereg` class containing the fitted model.
#' @seealso \code{\link[MASS]{lm.ridge}} for a comparable ridge regression implementation in the MASS package.
#' @examples
#' data(iris)
#' mod <- ridgereg_fit(Petal.Length ~ Species, data = iris, lambda = 0.1)
#' mod$print()
#' mod$predict(newdata = iris)
#' mod$coef()
#' @export
ridgereg_fit <- function(formula, data, lambda) {
data_name <- deparse(substitute(data))
ridgereg$new(formula = formula, data = data, data_name = data_name, lambda = lambda)
}
source("~/workspace/github/linreg/R/ridgereg.R")
data("iris")
my_ridgereg <- ridgereg_fit(Petal.Length ~ Species, data = iris, lambda = 0.1)
my_ridgereg$print()
# install.packages(c("nycflights13", "dplyr", "ggplot2"))
install.packages(c("nycflights13", "dplyr", "ggplot2"))
# 安装必要的包（如果尚未安装）
# install.packages(c("nycflights13", "dplyr", "ggplot2"))
# 加载必要的包
library(nycflights13)
library(dplyr)
library(ggplot2)
# 创建可视化函数
visualize_airport_delays <- function() {
# 数据处理：计算每个机场的平均延误
airport_delays <- flights %>%
# 选择相关变量并过滤掉延误缺失值
filter(!is.na(arr_delay)) %>%
# 将延误信息与机场信息合并
group_by(dest) %>%
summarise(mean_delay = mean(arr_delay, na.rm = TRUE)) %>%
# 将平均延误与机场信息合并
left_join(airports, by = c("dest" = "faa"))
# 绘制可视化
ggplot(data = airport_delays, aes(x = lon, y = lat, size = mean_delay)) +
geom_point(alpha = 0.5) +
scale_size_continuous(range = c(1, 10), name = "Mean Arrival Delay (minutes)") +
labs(title = "Mean Arrival Delays by Airport",
x = "Longitude",
y = "Latitude") +
theme_minimal()
}
# 调用可视化函数
visualize_airport_delays()
# 安装必要的包（如果尚未安装）
# install.packages(c("nycflights13", "dplyr", "ggplot2"))
# 加载必要的包
library(nycflights13)
library(dplyr)
library(ggplot2)
# 创建可视化函数
visualize_airport_delays <- function() {
# 数据处理：计算每个机场的平均延误
airport_delays <- flights %>%
# 选择相关变量并过滤掉延误缺失值
filter(!is.na(arr_delay)) %>%
# 将延误信息与机场信息合并
group_by(dest) %>%
summarise(mean_delay = mean(arr_delay, na.rm = TRUE), .groups = 'drop') %>%
# 将平均延误与机场信息合并
left_join(airports, by = c("dest" = "faa")) %>%
# 过滤掉缺失经度和纬度的机场
filter(!is.na(lon) & !is.na(lat))
# 打印处理后的数据以进行调试
print(airport_delays)
# 绘制可视化
ggplot(data = airport_delays, aes(x = lon, y = lat, size = mean_delay)) +
geom_point(alpha = 0.5) +
scale_size_continuous(range = c(1, 10), name = "Mean Arrival Delay (minutes)") +
labs(title = "Mean Arrival Delays by Airport",
x = "Longitude",
y = "Latitude") +
theme_minimal()
}
# 调用可视化函数
visualize_airport_delays()
print(n = ...)
# 安装必要的包（如果尚未安装）
# install.packages(c("nycflights13", "dplyr", "ggplot2"))
# 加载必要的包
library(nycflights13)
library(dplyr)
library(ggplot2)
# 创建可视化函数
visualize_airport_delays <- function() {
# 数据处理：计算每个机场的平均延误
airport_delays <- flights %>%
filter(!is.na(arr_delay)) %>%
group_by(dest) %>%
summarise(mean_delay = mean(arr_delay, na.rm = TRUE), .groups = 'drop') %>%
left_join(airports, by = c("dest" = "faa")) %>%
filter(!is.na(lon) & !is.na(lat))
# 打印处理后的数据以进行调试，显示前20行
print(airport_delays, n = 20)
# 绘制可视化
ggplot(data = airport_delays, aes(x = lon, y = lat, size = mean_delay)) +
geom_point(alpha = 0.5) +
scale_size_continuous(range = c(1, 10), name = "Mean Arrival Delay (minutes)") +
labs(title = "Mean Arrival Delays by Airport",
x = "Longitude",
y = "Latitude") +
theme_minimal()
}
# 调用可视化函数
visualize_airport_delays()
data(iris)
my_ridgereg <- ridgereg_fit(Petal.Length ~ Species, data = iris, lambda = 0.1)
source("~/workspace/github/linreg/R/ridgereg.R")
data(iris)
my_ridgereg <- ridgereg_fit(Petal.Length ~ Species, data = iris, lambda = 0.1)
my_ridgereg$print()
devtools::load_all(".")
list = c("ridgereg_fit")
devtools::load_all(".")
rm(list = c("ridgereg_fit"))
devtools::load_all(".")
devtools::load_all(".")
devtools::document()
devtools::document()
# Load necessary packages
library(nycflights13)
library(dplyr)
library(ggplot2)
# Function to calculate average airport delays
calculate_airport_delays <- function() {
airport_delays <- flights %>%
filter(!is.na(arr_delay)) %>%
group_by(dest) %>%
summarise(mean_delay = mean(arr_delay, na.rm = TRUE), .groups = 'drop') %>%
left_join(airports, by = c("dest" = "faa")) %>%
filter(!is.na(lon) & !is.na(lat))
return(airport_delays)
}
# Create a visualization function
visualize_airport_delays <- function(airport_delays, point_alpha = 0.5, point_size_range = c(1, 10)) {
# Create the visualization
ggplot(data = airport_delays, aes(x = lon, y = lat, size = mean_delay)) +
geom_point(alpha = point_alpha, color = "blue", shape = 21, fill = "lightblue") +
scale_size_continuous(range = point_size_range, name = "Mean Arrival Delay (minutes)") +
labs(title = "Mean Arrival Delays by Airport",
x = "Longitude",
y = "Latitude") +
theme_minimal()
}
# Main function to execute the process
main <- function() {
airport_delays <- calculate_airport_delays()
# Print the processed data for debugging, showing the first 20 rows
print(airport_delays, n = 20)
# Call the visualization function
visualize_airport_delays(airport_delays)
}
# Call the main function
main()
devtools::document()
library(Roxygen2)
library(roxygen2)
installed.packages("packageName")
install.packages("packageName")
